// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owner {
  id        Int       @id @default(autoincrement())
  name      String
  Company   Company[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("owner")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String
  owner_id  Int
  owner     Owner      @relation(fields: [owner_id], references: [id])
  Employee  Employee[]
  project   project[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("company")
}

model Employee {
  id                       Int       @id @default(autoincrement())
  name                     String
  phone                    String
  salary                   Int
  companyId                Int
  company                  Company   @relation(fields: [companyId], references: [id])
  projectId                Int?
  project                  project?  @relation("AllProjects", fields: [projectId], references: [ProjectId])
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Profile                  Profile?
  projectManager           project[] @relation("ProjectManager")
  projectAccountController project[] @relation("ProjectAccountController")

  @@map("employee")
}

enum projectType {
  fixed
  timeAndMaterial
  progressive
}

model project {
  ProjectId                  Int         @id @default(autoincrement())
  projectName                String
  customerName               Customer    @relation(fields: [customerId], references: [id])
  projectGroup               String
  projectType                projectType
  StartDate                  DateTime
  DueDate                    DateTime?
  ProjectOwner               String
  projectManagerId           Int?
  projectManager             Employee?   @relation("ProjectManager", fields: [projectManagerId], references: [id])
  projectAccountControllerId Int?
  projectAccountController   Employee?   @relation("ProjectAccountController", fields: [projectAccountControllerId], references: [id])
  companyId                  Int
  company                    Company     @relation(fields: [companyId], references: [id])

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Employee   Employee[] @relation("AllProjects")
  customerId Int

  @@map("project")
}

model Profile {
  id               Int       @id @default(autoincrement())
  image            String
  email            String
  emergencyContact String
  bloodGroup       String
  dateOfBirth      String
  employee         Employee? @relation(fields: [employeeId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  employeeId       Int       @unique

  @@map("profile")
}

model Customer {
  id           Int    @id @default(autoincrement())
  CustomerName String

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  project         project[]
  CustomerProfile CustomerProfile[]

  @@map("customer")
}

model CustomerProfile {
  id          Int       @id @default(autoincrement())
  companyName String
  email       String
  phone       String
  address     String
  pincode     String
  fax         String?
  website     String?
  customer    Customer? @relation(fields: [customerId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId Int?

  @@map("customer_profile")
}